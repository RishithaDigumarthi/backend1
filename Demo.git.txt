Demo:
package com.example.demo;

import org.springframework.boot.SpringApplication;

import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Demo11Application {

	public static void main(String[] args) {
		SpringApplication.run(Demo11Application.class, args);
	}

}
app:
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/four-wheeler-db
spring.datasource.username=root
spring.datasource.password=Rishitha@12
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true
	
myuser:package com.example.demo.entity;

import jakarta.persistence.Entity;

import jakarta.persistence.Id;


@Entity
public class MyUser {
   
	@Id
    
    private String userName;
	private String password;


	@Override
	public String toString() {
		
		return "MyUser [userName=" + userName + ",password="+password+"]";
	}

public String getUserName() {
	return userName;
	}
public void setUserName(String userName) {
	this.userName=userName;
}

public String getpassword(String password) {
	return password;
	}
public void setpasswird(String password) {
	this.password=password;
}
public MyUser() {
	super();
}

public static Boolean checkUserisValid(String uName, String password2) {
	// TODO Auto-generated method stub
	return null;
}



public String getPassword() {
	// TODO Auto-generated method stub
	return null;
}

public static String addNewUserRecord(MyUser myuser) {
	// TODO Auto-generated method stub
	return null;
}



}
	
	



	repo:package com.example.demo.Repo;

import org.springframework.data.jpa.repository.JpaRepository;


import com.example.demo.entity.MyUser;

public interface MyUserRepo extends JpaRepository<MyUser, String>{
	

}

service:
package com.example.demo.Service;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

import com.example.demo.Repo.MyUserRepo;
import com.example.demo.entity.MyUser;

@Service
public class MyUserService {

	@Autowired
	MyUserRepo myUserRepo;
	
	public Boolean checkUserIsValid(String uName, String password) {
		
		Boolean res = false;
		
		MyUser myUser = myUserRepo.findById(uName).orElse(new MyUser());
		
		if(myUser.getUserName() != null) {
			
			if(myUser.getUserName().contentEquals(uName)) {
				if(myUser.getPassword().contentEquals(password)) {
					
					res = true;
				}
			}
		}
		
		
		return res;
	}


	public String addNewUserRecord(MyUser myuser) {
		String res=" ";
		try {
		
			 myUserRepo.save(myuser);
			 res="succesfully save user-->"+myuser.getUserName();
		}catch(Exception e) {
			res ="not able to save new user-->"+myuser.getUserName();
		}
		return res;
		
		}}




controller:
package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Service.MyUserService;
import com.example.demo.entity.MyUser;

@RestController
@CrossOrigin("*")
public class MyUserController {
	
	@Autowired
	MyUserService myUserSer;
	
	
	@GetMapping("four-wheeler/user/isValidUser")
	public Boolean checkUser(@RequestParam String  uName,String password) {
		
		System.out.println("from React Data----->");
		System.out.println("User NAme----->"+uName);
		System.out.println("Password----->"+password);
		
		Boolean res = myUserSer.checkUserIsValid(uName,password);
		
		return res;
	}
@PostMapping("/varun-motors/user/add")
public String	addNewUser(@RequestBody MyUser myuser){
	System.out.println("data--->"+myuser);
       String res=	myUserSer.addNewUserRecord(myuser);
       return res;
       
       
	}

	
	
	
}
